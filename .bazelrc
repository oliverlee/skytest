build --incompatible_strict_action_env
build --incompatible_enable_cc_toolchain_resolution
build --action_env="BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1"

build:clang --extra_toolchains=//toolchain:clang
build:gcc   --extra_toolchains=//toolchain:gcc

build:clang-format --aspects @bazel_clang_format//:defs.bzl%clang_format_aspect
build:clang-format --@bazel_clang_format//:binary=@llvm_toolchain//:clang-format
build:clang-format --@bazel_clang_format//:config=//:format_config
build:clang-format --output_groups=report
build:clang-format --keep_going

build:clang-tidy-base --config=clang
build:clang-tidy-base --aspects @bazel_clang_tidy//clang_tidy:clang_tidy.bzl%clang_tidy_aspect
build:clang-tidy-base --@bazel_clang_tidy//:clang_tidy_config=//:tidy_config
build:clang-tidy-base --output_groups=report
build:clang-tidy-base --keep_going

build:verbose-clang-tidy --config=clang-tidy-base
build:verbose-clang-tidy --@bazel_clang_tidy//:clang_tidy_executable=//tools:verbose-clang-tidy

build:clang-tidy --config=clang-tidy-base
build:clang-tidy --@bazel_clang_tidy//:clang_tidy_executable=@llvm_toolchain//:clang-tidy

coverage --combined_report=lcov
coverage --strategy=CoverageReport=local

# At least some of this is needed for the coverage tool to work.
coverage --experimental_split_coverage_postprocessing
coverage --experimental_fetch_all_coverage_outputs
coverage --remote_download_outputs=all
coverage --experimental_remote_download_regex=.*/((testlogs/.*/_coverage/.*)|coverage.dat$|_coverage/_coverage_report.dat$)

# Not sure why it doesn't work with clang. Should be possible.
coverage --extra_toolchains=//toolchain:gcc

# Needed because our tests are in a different package than the code they test.
coverage --instrumentation_filter='//...'

try-import %workspace%/user.bazelrc
