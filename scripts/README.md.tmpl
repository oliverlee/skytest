# skytest

A non-allocating[^1] C++17+ unit test framework.

## usage

```starlark
# .bazelrc
common --registry=https://raw.githubusercontent.com/digiboys/bazel-registry/main
common --registry=https://bcr.bazel.build
```

```starlark
# MODULE.bazel
bazel_dep(
    name = "skytest",
    version = "0.0.0",
    dev_dependency = True,
)
```

Then create a `cc_test` that depends on `@skytest`

## overview

A minimal unit test example


```cpp:example/minimal_pass.cpp
```

when run, will print

```console:example/minimal_pass.log
```

A test that fails

```cpp:example/minimal_fail.cpp
```

will print

```console:example/minimal_fail.log
```

When running tests, `skytest` will attempt to invoke test closures at
compile-time. If able to, results will be classified `CONSTEXPR PASS` or
`CONSTEXPR FAIL` instead of `PASS` or `FAIL`.

<details><summary>requiring compile-time evaluation of tests</summary>


The `ctest` literal can be used to require closures to be tested at
compile-time. In order to be usable with `ctest`, test closures must be empty
and non-constexpr functions must not be invoked.

```cpp:example/ctest_fail.cpp
```

results in the follow build error (snippet):

```console:example/ctest_fail.log
```

</details>

## examples

#### binary comparisons
<details><summary></summary>

Binary comparison predicates display arguments on failure.

```cpp:example/binary_comparisons.cpp
```

</details>

#### logical operators
<details><summary></summary>

Logical operators can be used to compose predicates - including user defined predicates.

```cpp:example/logical_operations.cpp
```

</details>

#### additional output on failure
<details><summary></summary>

Additional output can be displayed on test failure.

```cpp:example/additional_output.cpp
```
```console:example/additional_output.log
```

NOTE: The message closure is not invoked within the test closure. Capturing
`x` and `y` by reference will result in dangling.
</details>

#### user defined predicates
<details><summary></summary>

Defining a predicate with `pred` captures and displays arguments on failure.

```cpp:example/user_defined_predicates.cpp
```
```console:example/user_defined_predicates.log
```

The description of user defined predicates can be customized

```cpp:example/described_predicates.cpp
```
```console:example/described_predicates.log
```

C++20 enables a terser syntax.

```cpp:example/described_predicates_20.cpp
```

</details>

#### parameterized tests
<details><summary></summary>

Tests can be parameterized with a tuple-like

```cpp:example/type_parameterized.cpp
```

or with a range

```cpp:example/value_parameterized.cpp
```

If parameters are defined as a static constant, `constexr_params` and
`param_ref` can be used to define compile-time tests.

```cpp:example/constexpr_params_parameterized.cpp
```
```cpp:example/param_ref_parameterized.cpp
```

If parameters are defined as a literal-type[^2], C++20 allows use of `param`:

```cpp:example/param_parameterized.cpp
```

</details>

#### aborts
<details><summary></summary>

Check that abort is called (e.g. in a function precondition).

```cpp:example/aborts.cpp
```

</details>

[^1]: The default printer uses `std::cout` and `skytest::aborts` calls `fork`.
[^2]: https://en.cppreference.com/w/cpp/named_req/LiteralType
