load("//rules:skytest_test.bzl", "skytest_test")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load(
    "@local_config_info//:defs.bzl",
    "BAZEL_BIN",
    "BAZEL_EXTERNAL_DIR",
    "BAZEL_WORKSPACE_ROOT",
    "XDG_CACHE_HOME",
)

skytest_test(
    name = "pass_test",
    srcs = ["pass_test.cpp"],
    stdout = [
        "expect true.*PASS",
        "all tests passed",
    ],
)

skytest_test(
    name = "multiple_pass_test",
    srcs = ["multiple_pass_test.cpp"],
    stdout = [
        "expect true 1.*PASS",
        "expect true 2.*PASS",
        "all tests passed.*2 tests",
    ],
)

skytest_test(
    name = "fail_test",
    srcs = ["fail_test.cpp"],
    return_code = 1,
    stdout = [
        "expect true.*FAIL",
        "1 test failed",
    ],
)

skytest_test(
    name = "comparison_test",
    srcs = ["comparison_test.cpp"],
    return_code = 1,
    stdout = [
        "expect true.*PASS",
        "expect eq.*PASS",
        "expect ne.*PASS",
        "expect lt.*PASS",
        "expect gt.*PASS",
        "expect le.*PASS",
        "expect ge.*PASS",
        "not expect true.*FAIL.*comparison_test.cpp:22",
        "not expect eq.*FAIL.*comparison_test.cpp:23",
        "std::equal_to<void>{}(1, 0)",
        "not expect ne.*FAIL.*comparison_test.cpp:24",
        "std::not_equal_to<void>{}(1, 1)",
        "not expect lt.*FAIL.*comparison_test.cpp:25",
        "std::less<void>{}(1, 0)",
        "not expect gt.*FAIL.*comparison_test.cpp:26",
        "std::greater<void>{}(0, 1)",
        "not expect le.*FAIL.*comparison_test.cpp:27",
        "std::less_equal<void>{}(1, 0)",
        "not expect ge.*FAIL.*comparison_test.cpp:28",
        "std::greater_equal<void>{}(0, 1)",
    ],
)

skytest_test(
    name = "pred_test",
    srcs = ["pred_test.cpp"],
    return_code = 1,
    stdout = [
        "equal one.*PASS",
        "equal two.*FAIL.*pred_test.cpp:13",
        "lambda.*{}(1)",
    ],
)

skytest_test(
    name = "constexpr_test",
    srcs = ["constexpr_test.cpp"],
    copts = ["-std=c++20"],
    return_code = 1,
    stdout = [
        "constexpr pass.*\\[CONSTEXPR PASS\\]",
        "constexpr fail.*\\[CONSTEXPR FAIL\\].*cpp:14",
        "runtime pass.*\\[PASS\\]",
        "runtime fail.*\\[FAIL\\].*cpp:22",
        "runtime pass, constexpr fail.*\\[PASS\\].*(CONSTEXPR FAIL)",
        "runtime fail, constexpr pass.*\\[FAIL\\].*(CONSTEXPR PASS).*cpp:35",
        "3 tests passed.*3 tests failed",
    ],
)

expand_template(
    name = "noreturn_expect_sh",
    out = "noreturn_expect.sh",
    substitutions = {
        "$BAZEL_BIN": BAZEL_BIN,
        "$BAZEL_EXTERNAL_DIR": BAZEL_EXTERNAL_DIR,
        "$BAZEL_WORKSPACE_ROOT": BAZEL_WORKSPACE_ROOT,
        "$XDG_CACHE_HOME": XDG_CACHE_HOME,
    },
    template = "noreturn_expect.sh.tmpl",
)

sh_binary(
    name = "noreturn_expect_bin",
    srcs = ["noreturn_expect.sh"],
)

skytest_test(
    name = "noreturn_expect_test",
    binary = ":noreturn_expect_bin",
    return_code = 1,
    stderr = [
        "noreturn_expect.cpp:11:25:.*error:.*ignoring return value of.*expect",
        "11 |\\s*expect\\(.*\\).*;",
    ],
)

cc_library(
    name = "no_malloc",
    srcs = ["no_malloc.cpp"],
)

cc_binary(
    name = "null_printer",
    srcs = ["null_printer.cpp"],
    malloc = ":no_malloc",
    deps = ["//:skytest"],
)

skytest_test(
    name = "null_printer_test",
    binary = ":null_printer",
)
