load("//rules:skytest_test.bzl", "skytest_test")
load("//rules:sh_binary_template.bzl", "sh_binary_template")
load("@rules_cc//cc:defs.bzl", "cc_library")

skytest_test(
    name = "pass_test",
    srcs = ["pass_test.cpp"],
    stdout = [
        "expect true.*PASS",
        "all tests passed",
    ],
)

skytest_test(
    name = "multiple_pass_test",
    srcs = ["multiple_pass_test.cpp"],
    stdout = [
        "expect true 1.*PASS",
        "expect true 2.*PASS",
        "all tests passed.*2 tests",
    ],
)

skytest_test(
    name = "fail_test",
    srcs = ["fail_test.cpp"],
    return_code = 1,
    stdout = [
        "expect true.*FAIL",
        "1 test failed",
    ],
)

skytest_test(
    name = "expect_message_test",
    srcs = ["expect_message_test.cpp"],
    return_code = 1,
    stdout = [
        "hello, world!",
        "hello, again!",
        "got: 1",
        "1 test passed.*3 tests failed",
    ],
)

red = "31m"

green = "32m"

skytest_test(
    name = "composable_test",
    srcs = ["composable_test.cpp"],
    return_code = 1,
    stdout = [line.format(
        g = green,
        r = red,
    ) for line in [
        "{r}.*(1 == 2).*{r}.*and.*{g}.*(2 < 3)",
        "{g}.*(1 < 2).*{r}.*and.*{r}.*(2 == 3)",
        "{r}.*(1 == 2).*and.*(2 == 3)",
        "{r}.*(1 == 2).*or.*(2 == 3)",
        "{r}.*not.*1 == 1",
        "{r}.*not.*1 == 1.*and.*not.*2 == 2.*and.*not.*3 == 3",
        "{r}.*{g}.*1 == 1.*and.*{r}.*2 == 3.*and.*{g}.*3 == 3",
        "or.*first passes.*PASS",
        "or.*second passes.*PASS",
    ]],
)

skytest_test(
    name = "comparison_test",
    srcs = ["comparison_test.cpp"],
    return_code = 1,
    stdout = [
        "expect true.*PASS",
        "expect eq.*PASS",
        "expect ne.*PASS",
        "expect lt.*PASS",
        "expect gt.*PASS",
        "expect le.*PASS",
        "expect ge.*PASS",
        "not expect true.*FAIL.*comparison_test.cpp:22",
        "not expect eq.*FAIL.*comparison_test.cpp:23",
        "(1 == 0)",
        "not expect ne.*FAIL.*comparison_test.cpp:24",
        "(1 != 1)",
        "not expect lt.*FAIL.*comparison_test.cpp:25",
        "(1 < 0)",
        "not expect gt.*FAIL.*comparison_test.cpp:26",
        "(0 > 1)",
        "not expect le.*FAIL.*comparison_test.cpp:27",
        "(1 <= 0)",
        "not expect ge.*FAIL.*comparison_test.cpp:28",
        "(0 >= 1)",
    ],
)

skytest_test(
    name = "pred_test",
    srcs = ["pred_test.cpp"],
    return_code = 1,
    stdout = [
        "equal one.*PASS",
        "equal two.*FAIL.*pred_test.cpp:.*",
        "lambda.*{}(1)",
    ],
)

skytest_test(
    name = "pred_notation_test",
    srcs = ["pred_notation_test.cpp"],
    cxxstd = [
        20,
        23,
    ],
    return_code = 1,
    stdout = [
        "(1 .*@.* 2)",
        "f.*(1, 2)",
        "∅.*(.*[1, 23].*)",
        "∅.*(hello)",
        "0 tests passed.*4 tests failed",
    ],
)

skytest_test(
    name = "arg_fmt_test",
    srcs = ["arg_fmt_test.cpp"],
    return_code = 1,
    stdout = [
        "empty(\\[1, 2, 3\\])",
        "empty({4}{5})",
        "wrapped{...} == wrapped{...}",
    ],
)

skytest_test(
    name = "constexpr_test",
    srcs = ["constexpr_test.cpp"],
    return_code = 1,
    stdout = [
        "constexpr pass.*\\[CONSTEXPR PASS\\]",
        "constexpr fail.*\\[CONSTEXPR FAIL\\].*cpp:19",
        "runtime pass.*\\[PASS\\]",
        "runtime fail.*\\[FAIL\\].*cpp:27",
        "closure with capture.*\\[PASS\\]",
        "function object with member value 1.*\\[PASS\\]",
        "function object with member value 2.*\\[FAIL\\].*cpp:11",
        "repeated closure 1.*\\[CONSTEXPR PASS\\]",
        "repeated closure 2.*\\[CONSTEXPR PASS\\]",
        "6 tests passed.*3 tests failed",
    ],
)

skytest_test(
    name = "constexpr_runtime_diverge_test",
    srcs = ["constexpr_runtime_diverge_test.cpp"],
    cxxstd = [
        20,
        23,
    ],
    return_code = 1,
    stdout = [
        "runtime pass, constexpr fail.*\\[PASS\\].*(CONSTEXPR FAIL)",
        "runtime fail, constexpr pass.*\\[FAIL\\].*(CONSTEXPR PASS).*cpp:21",
        "1 test passed.*1 test failed",
    ],
)

skytest_test(
    name = "type_parameterized_test",
    srcs = ["type_parameterized_test.cpp"],
    return_code = 1,
    stdout = [
        "typed.*<const float \\?&>.*FAIL",
        "typed.*<const std::complex<double> \\?&>.*FAIL",
        "typed.*<.*std::nullptr_t \\?&>.*FAIL",
        "typed.*<.*type_identity<float>.*>.*CONSTEXPR PASS",
        "typed.*<.*type_identity<std::complex<double> \\?>.*>.*CONSTEXPR PASS",
        "typed.*<.*type_identity<std::nullptr_t>.*>.*CONSTEXPR PASS",
        "pair types.*<const float \\?&>.*PASS",
        "pair types.*<const double \\?&>.*PASS",
        "custom tuple-like.*<int>.*PASS",
        "custom tuple-like.*<float>.*PASS",
        "custom tuple-like.*<double>.*PASS",
        "constexpr custom tuple-like.*<int>.*CONSTEXPR PASS",
        "constexpr custom tuple-like.*<float>.*CONSTEXPR PASS",
        "constexpr custom tuple-like.*<double>.*CONSTEXPR PASS",
        "11 tests passed.*3 tests failed",
    ],
)

# GCC seems to have issues with a reference to a std::array
skytest_test(
    name = "value_parameterized_test",
    srcs = ["value_parameterized_test.cpp"],
    stdout = [
        "vector values \\[0\\].*PASS",
        "vector values \\[1\\].*PASS",
        "vector values \\[2\\].*PASS",
        "array values \\[0\\].*CONSTEXPR PASS",
        "array values \\[1\\].*\\(CONSTEXPR \\)\\?PASS",
        "array values \\[2\\].*\\(CONSTEXPR \\)\\?PASS",
        "initializer_list values \\[0\\].*CONSTEXPR PASS",
        "initializer_list values \\[1\\].*CONSTEXPR PASS",
        "initializer_list values \\[2\\].*CONSTEXPR PASS",
        "all tests passed.*(9 tests)",
    ],
)

skytest_test(
    name = "literal_type_parameterized_test",
    srcs = ["literal_type_parameterized_test.cpp"],
    cxxstd = [
        20,
        23,
    ],
    return_code = 1,
    stdout = [
        "literal constexpr custom tuple-like.*<int>.*CONSTEXPR PASS",
        "literal constexpr custom tuple-like.*<float>.*CONSTEXPR PASS",
        "literal constexpr custom tuple-like.*<double>.*CONSTEXPR PASS",
        "literal constexpr range values \\[0\\].*CONSTEXPR FAIL",
        "literal constexpr range values \\[1\\].*CONSTEXPR PASS",
        "literal constexpr range values \\[2\\].*CONSTEXPR FAIL",
        "custom arithmetic range \\[0\\].*CONSTEXPR FAIL",
        "custom arithmetic range \\[1\\].*CONSTEXPR PASS",
        "custom arithmetic range \\[2\\].*CONSTEXPR FAIL",
        "custom arithmetic range \\[3\\].*CONSTEXPR PASS",
        "custom arithmetic range \\[4\\].*CONSTEXPR FAIL",
        "6 tests passed.*5 tests failed",
    ],
)

skytest_test(
    name = "aborts_test",
    srcs = ["aborts_test.cpp"],
    return_code = 1,
    stdout = [
        "aborts.*PASS",
        "does not abort.*FAIL",
        "exited: 0",
        "terminates due to sigint.*FAIL",
        "signal: SIGINT",
        "exits without abort.*FAIL",
        "exited: 1",
        "1 test passed.*3 tests failed",
    ],
)

cc_library(
    name = "no_malloc",
    srcs = ["no_malloc.cpp"],
)

skytest_test(
    name = "null_printer_test",
    srcs = ["null_printer_test.cpp"],
    malloc = ":no_malloc",
    deps = [
        "//tools:incompatible_with_ubsan_clang",
    ],
)

skytest_test(
    name = "noreturn_expect_test",
    srcs = ["noreturn_expect.sh.tmpl"],
    binary_type = sh_binary_template,
    return_code = 1,
    stderr = [
        "noreturn_expect.cpp:11:25:.*error:.*ignoring return value of.*expect",
        "11 |\\s*expect\\(.*\\).*;",
    ],
)
