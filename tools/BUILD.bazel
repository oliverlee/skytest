load("@bazel_clang_format//:defs.bzl", "clang_format_update")
load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@bazel_skylib//lib:selects.bzl", "selects")
load("//rules:incompatible.bzl", "incompatible_with_sanitizers")
load("//rules:lcov.bzl", "lcov")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")

config_setting_group = selects.config_setting_group

clang_format_update(
    name = "clang-format",
    binary = "@llvm_toolchain//:clang-format",
    config = "//:format_config",
)

buildifier(
    name = "buildifier.check",
    lint_mode = "warn",
    mode = "check",
)

buildifier(
    name = "buildifier.fix",
    lint_mode = "warn",
    mode = "fix",
)

genrule(
    name = "gen-clang-tidy",
    outs = ["clang-tidy.bash"],
    cmd = """
echo "#!/bin/bash" > $@
echo "cd \\$$BUILD_WORKSPACE_DIRECTORY" >> $@
echo "exec bazel build {options} \\$${{@:-{default}}}" >> $@
""".format(
        default = " -- //... -//test/... \\$$(bazel query //test/... | grep -v '.2[03]')",
        options = " ".join([
            "--extra_toolchains=//toolchain:clang",
            "--aspects=@rules_clang_tidy//:aspects.bzl%check",
            "--output_groups=report",
            "--keep_going",
            "--verbose_failures",
        ]),
    ),
)

# lint all targets with default options
#  bazel run //tools:clang-tidy
#
# lint with a single check on a single target
#   bazel run //tools:clang-tidy -- \
#     --@rules_clang_tidy//:extra-options=--checks='-*,clang-analyzer-core.uninitialized.Assign' \
#     //test:point_test
#
sh_binary(
    name = "clang-tidy",
    srcs = ["clang-tidy.bash"],
)

bool_flag(
    name = "incompatible_flag",
    build_setting_default = False,
)

config_setting(
    name = "incompatible",
    flag_values = {
        ":incompatible_flag": "true",
    },
)

config_setting_group(
    name = "incompatible_clang",
    match_all = [
        ":incompatible",
        "@rules_cc//cc/compiler:clang",
    ],
)

cc_library(
    name = "maybe_incompatible",
    target_compatible_with = select({
        ":incompatible": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

cc_library(
    name = "maybe_incompatible_clang",
    target_compatible_with = select({
        ":incompatible_clang": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

incompatible_with_sanitizers(
    name = "incompatible_with_asan",
    sanitizers = ["asan"],
    visibility = ["//test:__pkg__"],
    deps = ["//tools:maybe_incompatible"],
)

incompatible_with_sanitizers(
    name = "incompatible_with_tsan",
    sanitizers = ["tsan"],
    visibility = ["//test:__pkg__"],
    deps = ["//tools:maybe_incompatible"],
)

incompatible_with_sanitizers(
    name = "incompatible_with_ubsan_clang",
    sanitizers = ["ubsan"],
    visibility = ["//test:__pkg__"],
    deps = ["//tools:maybe_incompatible_clang"],
)

lcov_attrs = {
    "instrumented_targets": ["//:skytest"],
    "test_targets": ["//test/..."],
    "coverage_opts": [
        "--combined_report=lcov",
        "--experimental_generate_llvm_lcov",
        "--test_output=errors",
        "--extra_toolchains=//toolchain:gcc",
        # https://gcovr.com/en/stable/faq.html#why-does-c-code-have-so-many-uncovered-branches
        # https://stackoverflow.com/questions/42003783/lcov-gcov-branch-coverage-with-c-producing-branches-all-over-the-place
        "--cxxopt=-fno-exceptions",
    ],
}

lcov(
    name = "lcov_list",
    coverage_opts = lcov_attrs["coverage_opts"],
    instrumented_targets = lcov_attrs["instrumented_targets"],
    lcov_opts = [
        "--rc lcov_branch_coverage=1",
        "--list",
    ],
    test_targets = lcov_attrs["test_targets"],
)

lcov(
    name = "lcov_html",
    coverage_opts = lcov_attrs["coverage_opts"],
    instrumented_targets = lcov_attrs["instrumented_targets"],
    lcov_opts = [
        "--show-details",
        "--keep-descriptions",
        "--branch-coverage",
        "--highlight",
        "--demangle-cpp",
        "--missed",
        "--dark-mode",
    ],
    lcov_tool = "genhtml",
    test_targets = lcov_attrs["test_targets"],
)

compile_pip_requirements(
    name = "requirements",
    src = "requirements.in",
    requirements_txt = "requirements.lock",
)
