load("@bazel_clang_format//:defs.bzl", "clang_format_update")
load("@bazel_clang_tidy//:defs.bzl", "clang_tidy_apply_fixes")
load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@bazel_skylib//lib:selects.bzl", "selects")
load("//rules:incompatible.bzl", "incompatible_with_sanitizers")
load("//rules:lcov.bzl", "lcov")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")

config_setting_group = selects.config_setting_group

clang_format_update(
    name = "clang-format",
    binary = "@llvm_toolchain//:clang-format",
    config = "//:format_config",
)

clang_tidy_apply_fixes(
    name = "clang-tidy-fix",
    apply_replacements_binary = "@llvm_toolchain//:clang-apply-replacements",
    tidy_binary = "@llvm_toolchain//:clang-tidy",
    tidy_config = "//:tidy_config",
)

buildifier(
    name = "buildifier.check",
    lint_mode = "warn",
    mode = "check",
)

buildifier(
    name = "buildifier.fix",
    lint_mode = "warn",
    mode = "fix",
)

genrule(
    name = "gen_verbose_clang_tidy",
    srcs = [],
    outs = ["verbose-clang-tidy.sh"],
    # echo "$(dirname bazel-out/k8-fastbuild/bin/tools/verbose-clang-tidy.sh)/../<tidy-path>) ..."
    cmd = """
echo "$$(dirname $@)/../$(rootpath {tidy}) --enable-check-profile \\$$@" > $@
""".format(
        tidy = "@llvm_toolchain//:clang-tidy",
    ),
    executable = True,
    tools = ["@llvm_toolchain//:clang-tidy"],
)

sh_binary(
    name = "verbose-clang-tidy",
    srcs = ["verbose-clang-tidy.sh"],
    data = ["@llvm_toolchain//:clang-tidy"],
)

bool_flag(
    name = "incompatible_flag",
    build_setting_default = False,
)

config_setting(
    name = "incompatible",
    flag_values = {
        ":incompatible_flag": "true",
    },
)

config_setting_group(
    name = "incompatible_clang",
    match_all = [
        ":incompatible",
        "@rules_cc//cc/compiler:clang",
    ],
)

cc_library(
    name = "maybe_incompatible",
    target_compatible_with = select({
        ":incompatible": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

cc_library(
    name = "maybe_incompatible_clang",
    target_compatible_with = select({
        ":incompatible_clang": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

incompatible_with_sanitizers(
    name = "incompatible_with_asan",
    sanitizers = ["asan"],
    visibility = ["//test:__pkg__"],
    deps = ["//tools:maybe_incompatible"],
)

incompatible_with_sanitizers(
    name = "incompatible_with_tsan",
    sanitizers = ["tsan"],
    visibility = ["//test:__pkg__"],
    deps = ["//tools:maybe_incompatible"],
)

incompatible_with_sanitizers(
    name = "incompatible_with_ubsan_clang",
    sanitizers = ["ubsan"],
    visibility = ["//test:__pkg__"],
    deps = ["//tools:maybe_incompatible_clang"],
)

lcov_attrs = {
    "instrumented_targets": ["//:skytest"],
    "test_targets": ["//test/..."],
    "coverage_opts": [
        "--combined_report=lcov",
        "--experimental_generate_llvm_lcov",
        "--test_output=errors",
        "--extra_toolchains=//toolchain:gcc",
        # https://github.com/bazelbuild/bazel/issues/13919
        # https://github.com/bazelbuild/bazel/blob/master/tools/test/collect_cc_coverage.sh
        "--test_env=COVERAGE_GCOV_OPTIONS=-b",
        # https://gcovr.com/en/stable/faq.html#why-does-c-code-have-so-many-uncovered-branches
        # https://stackoverflow.com/questions/42003783/lcov-gcov-branch-coverage-with-c-producing-branches-all-over-the-place
        "--cxxopt=-fno-exceptions",
    ],
}

lcov(
    name = "lcov_list",
    coverage_opts = lcov_attrs["coverage_opts"],
    instrumented_targets = lcov_attrs["instrumented_targets"],
    lcov_opts = [
        "--rc lcov_branch_coverage=1",
        "--list",
    ],
    test_targets = lcov_attrs["test_targets"],
)

lcov(
    name = "lcov_html",
    coverage_opts = lcov_attrs["coverage_opts"],
    instrumented_targets = lcov_attrs["instrumented_targets"],
    lcov_opts = [
        "--show-details",
        "--keep-descriptions",
        "--branch-coverage",
        "--highlight",
        "--demangle-cpp",
        "--missed",
        "--dark-mode",
    ],
    lcov_tool = "genhtml",
    test_targets = lcov_attrs["test_targets"],
)

compile_pip_requirements(
    name = "requirements",
    src = "requirements.in",
    requirements_txt = "requirements.lock",
)
